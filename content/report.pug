doctype strict
- const domParser = Components.classes['@mozilla.org/xmlextras/domparser;1'].createInstance(Components.interfaces.nsIDOMParser)
- const nonMeta = new Set([])
- nonMeta.add('reportSearchMatch')
- nonMeta.add('reportChildren')
- nonMeta.add('key')
- nonMeta.add('version')
- nonMeta.add('itemType')
- nonMeta.add('title')
- nonMeta.add('creators')
- nonMeta.add('note')
- nonMeta.add('collections')
- nonMeta.add('relations')
- nonMeta.add('tags')
- nonMeta.add('deleted')
- nonMeta.add('parentItem')
- nonMeta.add('charset')
- nonMeta.add('contentType')
- nonMeta.add('linkMode')
- nonMeta.add('path')
- nonMeta.add('qualityReport')
mixin metadata(item)
  - var table = false
  //- https://github.com/pugjs/pug/issues/3020 is pretty dumb people. Make a breaking change already.
  each field in Object.keys(item)
    if nonMeta.has(field) || field == 'dateAdded' || field == 'dateModified'
      - table = false
    else if field == 'creators'
      - table = item[field].length
    else
      - item[field] = `${item[field]}`.trim()
      - table = item[field] && fieldName(item.itemType, field)

    if table
      - break

  if table
    table
      tbody
        tr.itemType
          th.edit
            a(href='#' data-type='itemType' onclick='report.deleteField(this)')
              i.material-icons.md-dark.md-18 clear
            a(href='#' data-type='itemType' onclick='report.setSort(this)')
              i.material-icons.md-dark.md-18.md-inactive sort_by_alpha
          th #{Zotero.getString('itemFields.itemType')}
          td #{Zotero.ItemTypes.getLocalizedString(item.itemType)}
  
        //- Creators
        if item.creators
          each creator in item.creators
            tr.creator(class=creator.creatorType)
              th.edit
                a(href='#' data-type='creator' onclick='report.deleteField(this)')
                  i.material-icons.md-dark.md-18 clear
                a(href='#' data-type='creator' onclick='report.setSort(this)')
                  i.material-icons.md-dark.md-18.md-inactive sort_by_alpha
              th(class=creator.creatorType) #{Zotero.getString('creatorTypes.' + creator.creatorType)}
              td #{creator.name}
  
        //- Move dateAdded and dateModified to the end of the object
        - var da = item.dateAdded
        - var dm = item.dateModified
        - delete item.dateAdded
        - delete item.dateModified
        - item.dateAdded = da
        - item.dateModified = dm
  
        //- https://github.com/pugjs/pug/issues/3020 is pretty dumb people. Make a breaking change already.
        each field in Object.keys(item)
          if nonMeta.has(field) || !fieldName(item.itemType, field)
            - continue
          - value = item[field]
  
          if value
            - var fieldClass = fieldAlias[`${item.itemType}.${field}`] || field
            tr(class=fieldClass)
              th.edit
                a(href='#' data-type=fieldClass onclick='report.deleteField(this)')
                  i.material-icons.md-dark.md-18 clear
                a(href='#' data-type=fieldClass onclick='report.setSort(this)')
                  i.material-icons.md-dark.md-18.md-inactive sort_by_alpha
              th #{fieldName(item.itemType, field)}
              td
                if field == 'url' && value.match(/^https?:\/\//)
                  //- URL
                  a(href=value) #{value}
                else if field == 'DOI'
                  //- Hyperlink DOI
                  a(href=`http://doi.org/${value}`) #{value}
                else if field == 'date'
                  //- Remove SQL date from multipart dates
                  //- (e.g. '2006-00-00 Summer 2006' becomes 'Summer 2006')
                  | #{Zotero.Date.multipartToStr(value)}
                else if field == 'accessDate' || field == 'dateAdded' || field == 'dateModified'
                  //- Convert dates to local format
                  | #{Zotero.Date.isoToDate(value, true).toLocaleString()}
                else
                  | #{value}
//-
mixin tags(item)
  if item.tags && item.tags.length
    h3.tags
      span.edit
        a(href='#' data-type='tags' onclick='report.deleteField(this)')
          i.material-icons.md-dark.md-18 clear
      | #{Zotero.getString('report.tags')}
    ul.tags
      each tag in item.tags
        li #{tag.tag}
          sup #{tagCount[tag.tag]}
mixin qualityReport(item)
  if item.qualityReport && item.qualityReport.length
    h3.quality-report
      span.edit
        a(href='#' data-type='tags' onclick='report.deleteField(this)')
          i.material-icons.md-dark.md-18 clear
      | #{fieldName(item.itemType, 'qualityReport')}
    ul.quality-report
      each msg in item.qualityReport
        li #{msg}
//-
mixin attachments(item)
  if item.attachments && item.attachments.length
    h3.attachments
      span.edit
        a(href='#' data-type='attachments' onclick='report.deleteField(this)')
          i.material-icons.md-dark.md-18 clear
      | #{Zotero.getString('itemFields.attachments')}
    ul.attachments
      each attachment in item.attachments
        li(id=`item_${attachment.key}`)
          if attachment.title
            | #{attachment.title}

          //- Attachment tags
          +tags(attachment)

          //- Attachment note
          if attachment.note
            +note(attachment.note)
//-
mixin note(text)
  div.notes
    //- If HTML tag or entity, parse as HTML
    if text.match(/(<(p|ul|ol|div|a|br|b|i|u|strong|em( >))|&[a-z]+;|&#[0-9]+;)/)
      //- Strip control characters (for notes that were
      //- added before item.setNote() started doing this)
      | !{domParser.parseFromString(`<div>${text.replace(/[\u0000-\u0008\u000B\u000C\u000E-\u001F\u007F]/g, '')}</div>`, 'text/html').body.innerHTML}
    else
      //- Otherwise, treat as plain text
      p.plaintext #{text}
//-
html
  head
    meta(http-equiv='Content-Type' content='text/html; charset=utf-8')
    title #{Zotero.getString('report.title.default')}
    link(rel='stylesheet' type='text/css' href='zotero://report/detail.css')
    link(rel='stylesheet' type='text/css' media='screen,projection' href='zotero://report/detail_screen.css')
    link(rel='stylesheet' type='text/css' media='print' href='zotero://report/detail_print.css')
    style.
      #save {
        display: none;
      }

      .edit {
        display: none;
      }
      th.edit {
        width: 40px !important;
      }

      .edit-header {
        position: sticky;
        top: 10px;
        right: 10px;
      }

      iframe {
        display: none;
        width: 0;
        height: 0;
        border: none;
        position: absolute;
      }

      @media print {
        .edit-header, .edit {
          display: none !important;
        }
      }

      @font-face {
        font-family: 'Material Icons';
        font-style: normal;
        font-weight: 400;
        src: local('Material Icons'),
          local('MaterialIcons-Regular'),
          url(#{require('material-design-icons/iconfont/MaterialIcons-Regular.woff2')}) format('woff2'),
          url(#{require('material-design-icons/iconfont/MaterialIcons-Regular.woff')}) format('woff')
      }

      .material-icons {
        font-family: 'Material Icons';
        font-weight: normal;
        font-style: normal;
        font-size: 24px;  /* Preferred icon size */
        display: inline-block;
        line-height: 1;
        text-transform: none;
        letter-spacing: normal;
        word-wrap: normal;
        white-space: nowrap;
        direction: ltr;

        /* Support for all WebKit browsers. */
        -webkit-font-smoothing: antialiased;
        /* Support for Safari and Chrome. */
        text-rendering: optimizeLegibility;

        /* Support for Firefox. */
        -moz-osx-font-smoothing: grayscale;

        /* Support for IE. */
        font-feature-settings: 'liga';

        vertical-align: middle !important;
        padding-bottom: 3px;
      }

      /* Rules for sizing the icon. */
      .material-icons.md-18 { font-size: 18px; }
      .material-icons.md-24 { font-size: 24px; }
      .material-icons.md-36 { font-size: 36px; }
      .material-icons.md-48 { font-size: 48px; }

      /* Rules for using icons as black on a light background. */
      .material-icons.md-dark { color: rgba(0, 0, 0, 0.54); }
      .material-icons.md-dark.md-inactive { color: rgba(0, 0, 0, 0.26); }

      /* Rules for using icons as white on a dark background. */
      .material-icons.md-light { color: rgba(255, 255, 255, 1); }
      .material-icons.md-light.md-inactive { color: rgba(255, 255, 255, 0.3); }
  body
    div.edit-header
      a#edit(href='#' onclick='report.toggleEdit()')
        i.material-icons.md-dark edit
      | 
      a#undo(href='#' onclick='report.restore()')
        i.material-icons.md-dark undo
      | 
      a#reset(href='#' onclick='report.reset()')
        i.material-icons.md-dark clear_all
      | 
      a#save(href='#' onclick='report.save()')
        i.material-icons.md-dark save
      div
        pre#log

    ul#report.report(class={combineChildItems: 'combineChildItems'})
      each item in items
        li.item(id=`item_${item.key}` class=item.itemType)
          if item.title
            if item.reportSearchMatch
              //- Top-level item matched search, so display title. titles may have html-ish code, so don't escape
              h2
                span.edit
                  a(href='#' data-type='title' onclick='report.setSort(this)')
                    i.material-icons.md-dark.md-18.md-inactive sort_by_alpha
                | !{item.title}
            else
              //- Non-matching parent, so display "Parent Item: [Title]". titles may have html-ish code, so don't escape
              h2.parentItem
                span.edit
                  a(href='#' data-type='title' onclick='report.setSort(this)')
                    i.material-icons.md-dark.md-18.md-inactive sort_by_alpha
                | #{Zotero.getString('report.parentItem')}
                span !{item.title}

          //- If parent matches search, display parent item metadata table and tags
          if item.reportSearchMatch
            +metadata(item)
            +tags(item)

            //- Independent note
            if item.note
              +note(item.note)

          //- Children
          if item.reportChildren
            //- Child notes
            if item.reportChildren.notes.length
              //- Only display "Notes:" header if parent matches search
              if item.reportSearchMatch
                h3.notes
                  span.edit
                    a(href='#' data-type='notes' onclick='report.deleteField(this)')
                      i.material-icons.md-dark.md-18 clear
                  | #{Zotero.getString('report.notes')}

              ul.notes
                each note in item.reportChildren.notes
                  li(id=`item_${note.key}`)
                    +note(note.note)
                    +tags(note)

            //- Child attachments
            +attachments(item.reportChildren)

          //- Related items
          if item.relations
            h3.related #{Zotero.getString('itemFields.related')}
            ul.related
              each relation in item.relations
                li(id=`item_${relation.key}`) #{relation.title}
          +qualityReport(item)
script.
  const config = !{JSON.stringify(config)};
  const defaults = !{JSON.stringify(defaults)};
  !{require('!inline-ts!./report.ts')}
iframe#backend(src=backend)
