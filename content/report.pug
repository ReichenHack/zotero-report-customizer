doctype strict
- const domParser = Components.classes['@mozilla.org/xmlextras/domparser;1'].createInstance(Components.interfaces.nsIDOMParser)
- const nonMeta = new Set([])
- nonMeta.add('reportSearchMatch')
- nonMeta.add('reportChildren')
- nonMeta.add('key')
- nonMeta.add('version')
- nonMeta.add('creators')
- nonMeta.add('itemType')
- nonMeta.add('title')
- nonMeta.add('note')
- nonMeta.add('collections')
- nonMeta.add('relations')
- nonMeta.add('tags')
- nonMeta.add('deleted')
- nonMeta.add('parentItem')
- nonMeta.add('charset')
- nonMeta.add('contentType')
- nonMeta.add('linkMode')
- nonMeta.add('path')
- nonMeta.add('qualityReport')
- nonMeta.add('bibliography')
//-
mixin fieldEdit(type)
  a(href='#' data-type=type onclick='report.deleteField(this)')
    span.mdi.mdi-dark.mdi-delete(title='delete')
  a(href='#' data-type=type onclick='report.setSort(this)')
    span.mdi.mdi-dark.mdi-inactive.mdi-sort-ascending(title='sort')
  a(href='#' data-type=type onclick='report.moveUp(this)')
    span.mdi.mdi-dark.mdi-chevron-up(title='move up')
  a(href='#' data-type=type onclick='report.moveDown(this)')
    span.mdi.mdi-dark.mdi-chevron-down(title='move down')
//-
mixin selectLink(item)
  - var link = `zotero://select/items/${item.libraryID || 0}_${item.key}`
  a(href=link) #{link}
mixin metadata(item)
  - var table = false
  //- https://github.com/pugjs/pug/issues/3020 is pretty dumb people. Make a breaking change already.
  each field in Object.keys(item)
    if field == 'creators'
      - table = item[field].length
    else if nonMeta.has(field) || field == 'dateAdded' || field == 'dateModified'
      - table = false
    else
      - item[field] = `${item[field]}`.trim()
      - table = item[field] && fieldName(item.itemType, field)

    if table
      - break

  if table
    table
      tbody
        //- because Zotero won't save the DOM as it is displayed...
        for field in config.fields.order
          case field
            when 'itemType'
              tr.itemType(data-sort='itemType')
                th.edit
                  +fieldEdit('itemType')
                th #{Zotero.getString('itemFields.itemType')}
                td #{Zotero.ItemTypes.getLocalizedString(item.itemType)}

            when 'creator'
              //- Creators
              if item.creators
                each creator, index in item.creators
                  tr.creator(class=creator.creatorType data-sort='creator')
                    th.edit
                      if index === 0
                        +fieldEdit('creator')
                    th(class=creator.creatorType) #{Zotero.getString('creatorTypes.' + creator.creatorType)}
                    td #{creator.name}

            when 'selectLink'
              if item.key
                tr.selectLink(data-sort='selectLink')
                  th.edit
                    +fieldEdit('selectLink')
                  th Select in Zotero
                  td
                    +selectLink(item)

            default
              if nonMeta.has(field) || !fieldName(item.itemType, field)
                - continue
              - value = item[field]

              if value
                - fieldClass = fieldAlias[`${item.itemType}.${field}`] || field
                - fieldClasses = fieldClass === field ? field : `${fieldClass} ${field}`
                tr(class=fieldClasses data-sort=fieldClass)
                  th.edit
                    +fieldEdit(fieldClass)
                  th #{fieldName(item.itemType, field)}
                  td(data-sort=['accessDate', 'dateAdded', 'dateModified'].includes(field) ? value.replace(/T.*/, '') : (field === 'date' ? normalizeDate(value) : null))
                    if field == 'url' && value.match(/^https?:\/\//)
                      //- URL
                      a(href=value) #{value}
                    else if field == 'DOI'
                      //- Hyperlink DOI
                      a(href=`http://doi.org/${value}`) #{value}
                    else if field == 'date'
                      //- Remove SQL date from multipart dates
                      //- (e.g. '2006-00-00 Summer 2006' becomes 'Summer 2006')
                      | #{Zotero.Date.multipartToStr(value)}
                    else if field == 'accessDate' || field == 'dateAdded' || field == 'dateModified'
                      | #{Zotero.Date.isoToDate(value, true).toLocaleString()}
                    else
                      | #{value}
//-
mixin tags(item)
  if item.tags && item.tags.length
    h3.tags
      span.edit
        a(href='#' data-type='tags' onclick='report.deleteField(this)')
          span.mdi.mdi-dark.mdi-delete(title='delete')
      | #{Zotero.getString('report.tags')}
    ul.tags
      each tag in item.tags
        li #{tag.tag}
          if tagCount[tag.tag] > 1
            sup #{tagCount[tag.tag]}
//-
mixin qualityReport(item)
  if item.qualityReport && item.qualityReport.length
    h3.qualityReport
      span.edit
        a(href='#' data-type='qualityReport' onclick='report.deleteField(this)')
          span.mdi.mdi-dark.mdi-delete(title='delete')
      | #{fieldName(item.itemType, 'qualityReport')}
    ul.qualityReport
      each msg in item.qualityReport
        li #{msg}
//-
mixin attachments(item)
  if item.attachments && item.attachments.length
    h3.attachments
      span.edit
        a(href='#' data-type='attachments' onclick='report.deleteField(this)')
          span.mdi.mdi-dark.mdi-delete(title='delete')
      | #{Zotero.getString('itemFields.attachments')}
    ul.attachments
      each attachment in item.attachments
        li(id=`item_${attachment.key}`)
          if attachment.title
            | #{attachment.title}

          //- Attachment tags
          +tags(attachment)

          //- Attachment note
          if attachment.note
            +note(attachment)
//-
mixin note(item)
  div.notes
    if item.key
      .selectLink
        +selectLink(item)
    //- If HTML tag or entity, parse as HTML
    if item.note.match(/(<(p|ul|ol|div|a|br|b|i|u|strong|em( >))|&[a-z]+;|&#[0-9]+;)/)
      //- Strip control characters (for notes that were
      //- added before item.setNote() started doing this)
      | !{domParser.parseFromString(`<div>${item.note.replace(/[\u0000-\u0008\u000B\u000C\u000E-\u001F\u007F]/g, '')}</div>`, 'text/html').body.innerHTML}
    else
      //- Otherwise, treat as plain text
      p.plaintext #{item.note}
//-
html
  head
    meta(http-equiv='Content-Type' content='text/html; charset=utf-8')
    title #{Zotero.getString('report.title.default')}
    style.
      !{require('!!raw-loader!./detail.css').default}

      @media screen {
        !{require('!!raw-loader!./detail_screen.css').default}
      }
      @media print {
        !{require('!!raw-loader!./detail_print.css').default}
      }

      #save {
        display: none;
      }

      .edit {
        display: none;
      }
      th.edit {
        width: 40px !important;
      }

      #edit-header {
        position: sticky;
        top: 10px;
        right: 10px;
      }

      iframe {
        display: none;
        width: 0;
        height: 0;
        border: none;
        position: absolute;
      }


      @media print {
        #edit-header, .edit {
          display: none !important;
        }
      }

      @font-face {
        font-family: 'Material Design Icons';
        font-weight: normal;
        font-style: normal;
        src: url(#{require('@mdi/font/fonts/materialdesignicons-webfont.woff2')}) format('woff2');
      }

      !{require('!!raw-loader!../gen/materialdesignicons.css').default}
    style#style
      if config.fields.remove.length
        | !{config.fields.remove.map(type => `.${type}`).join(', ')} { display: none; }
    if MathJax
      script.
        try {
          window.MathJax = !{MathJax};
        } catch (err) {
          alert(err)
        }
    script(type='text/javascript' async src='https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.5/MathJax.js?config=TeX-MML-AM_CHTML')
  body
    div#backend
    div#edit-header
      a#edit(href='#' onclick='report.toggleEdit()')
        span.mdi.mdi-dark.mdi-24px.mdi-pencil(title='edit')
      | 
      a#undo(href='#' onclick='report.restore()')
        span.mdi.mdi-dark.mdi-24px.mdi-undo(title='undo')
      | 
      a#reset(href='#' onclick='report.reset()')
        span.mdi.mdi-dark.mdi-24px.mdi-restore(title='restore')
      | 
      a#save(href='#' onclick='report.save()')
        span.mdi.mdi-dark.mdi-24px.mdi-content-save(title='save')

    ul#report.report(class={combineChildItems: 'combineChildItems'})
      each item in items
        li.item(id=`item_${item.key}` class=item.itemType)
          if item.bibliography || item.title
            if item.reportSearchMatch
              //- Top-level item matched search, so display title. titles may have html-ish code, so don't escape
              h2
                span.edit
                  a(href='#' data-type='title' onclick='report.setSort(this)')
                    span.mdi.mdi-dark.mdi-inactive.mdi-sort-ascending(title='sort ascending')
                | !{item.bibliography || item.title}
            else
              //- Non-matching parent, so display "Parent Item: [Title]". titles may have html-ish code, so don't escape
              h2.parentItem
                span.edit
                  a(href='#' data-type='title' onclick='report.setSort(this)')
                    span.mdi.mdi-dark.mdi-inactive.mdi-sort-ascending(title='sort ascending')
                | #{Zotero.getString('report.parentItem')}
                span !{item.bibliography || item.title}

          //- If parent matches search, display parent item metadata table and tags
          if item.reportSearchMatch
            +metadata(item)
            +tags(item)

            //- Independent note
            if item.note
              +note(item)

          //- Children
          if item.reportChildren
            //- Child notes
            if item.reportChildren.notes.length
              //- Only display "Notes:" header if parent matches search
              if item.reportSearchMatch
                h3.notes
                  span.edit
                    a(href='#' data-type='notes' onclick='report.deleteField(this)')
                      span.mdi.mdi-dark.mdi-delete(title='delete')
                  | #{Zotero.getString('report.notes')}

              ul.notes
                each note in item.reportChildren.notes
                  li(id=`item_${note.key}`)
                    +note(note)
                    +tags(note)

            //- Child attachments
            +attachments(item.reportChildren)

          //- Related items
          if item.relations
            h3.related #{Zotero.getString('itemFields.related')}
            ul.related
              each relation in item.relations
                li(id=`item_${relation.key}`) #{relation.title}
          +qualityReport(item)
  script.
    const config = !{JSON.stringify(config)};
    const defaults = !{JSON.stringify(defaults)};
    const backend = !{JSON.stringify(backend)};
    !{require('!!inline-ts!./report.ts')}
